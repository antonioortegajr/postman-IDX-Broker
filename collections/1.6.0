{
	"info": {
		"_postman_id": "099db39d-8fef-4dd9-92e3-fbb1c9503958",
		"name": "IDX API 1.6.0 Test Runner",
		"description": "IDX Broker API calls in version 1.6.0\n\nRequired:\n* Environment variable url\n* Environment variable for request headers\n* Environment variable partner key\n* Client account with at least one featured listing\n\nTests are in this order as variables such as listing ID and approved MLS are passed to subsequent API calls.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1st Test - MLS",
			"item": [
				{
					"name": "approvedmls",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"         //set approved MLS",
									"        postman.setGlobalVariable(\"approvedMLS\", isJson[0]['id']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"        ",
									"        //set approved MLS",
									"        postman.setGlobalVariable(\"approvedMLS\", \"a000\");",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/approvedmls",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"approvedmls"
							]
						},
						"description": "This method provides all of the IDX IDs and names for all of the paperwork approved MLSs on the client's account.\n\nNote: This method was previously camelcased as \"approvedMLS\" but was made lower case to fit the API naming convention. Calls to \"approvedMLS\" will be forwarded to \"approvedmls\" and \"approvedMLS\" is listed as deprecated in the method list."
					},
					"response": []
				},
				{
					"name": "listcomponents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/listcomponents",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"listcomponents"
							]
						},
						"description": "This is a simple, access anywhere, method for getting a list of all API components available."
					},
					"response": []
				},
				{
					"name": "listmethods",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/listmethods",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"listmethods"
							]
						},
						"description": "A simple method for listing all available methods in the current API component. This method will also list which request methods (GET, PUT, POST, or DELETE) are supported by each method in addition to each method status."
					},
					"response": []
				},
				{
					"name": "age",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/age/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"age",
								"{{approvedMLS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "propertytypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/propertytypes/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"propertytypes",
								"{{approvedMLS}}"
							]
						},
						"description": "Gives the property type information for all types that are available on a given MLS."
					},
					"response": []
				},
				{
					"name": "cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9590f35-339a-4289-864a-70be62151138",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set approved MLS",
									"        pm.environment.set(\"cityID\", isJson[0]['cityID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/cities/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"cities",
								"{{approvedMLS}}"
							]
						},
						"description": "All cities represented in the current set of MLS data are available from this method. "
					},
					"response": []
				},
				{
					"name": "cities sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fd5a661-17bf-44a7-90d2-765449345bb9",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set approved MLS",
									"        postman.setGlobalVariable(\"cityID\", isJson[0]['cityID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/cities/sold/{{approvedMLS}}?filterField=cityID&filterValue={{cityID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"cities",
								"sold",
								"{{approvedMLS}}"
							],
							"query": [
								{
									"key": "filterField",
									"value": "cityID"
								},
								{
									"key": "filterValue",
									"value": "{{cityID}}"
								}
							]
						},
						"description": "All cities represented in the current set of MLS data are available from this method. "
					},
					"response": []
				},
				{
					"name": "counties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ac7a0ed-8de6-435f-a144-46fc5b711343",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set approved MLS",
									"        postman.setGlobalVariable(\"cityID\", isJson[0]['cityID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/counties/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"counties",
								"{{approvedMLS}}"
							]
						},
						"description": "All cities represented in the current set of MLS data are available from this method. "
					},
					"response": []
				},
				{
					"name": "counties sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ac7a0ed-8de6-435f-a144-46fc5b711343",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set approved MLS",
									"        postman.setGlobalVariable(\"cityID\", isJson[0]['cityID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/counties/sold/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"counties",
								"sold",
								"{{approvedMLS}}"
							]
						},
						"description": "All cities represented in the current set of MLS data are available from this method. "
					},
					"response": []
				},
				{
					"name": "zipcodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ac7a0ed-8de6-435f-a144-46fc5b711343",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set approved MLS",
									"        postman.setGlobalVariable(\"cityID\", isJson[0]['cityID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/zipcodes/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"zipcodes",
								"{{approvedMLS}}"
							]
						},
						"description": "All cities represented in the current set of MLS data are available from this method. "
					},
					"response": []
				},
				{
					"name": "zipcodes sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ac7a0ed-8de6-435f-a144-46fc5b711343",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set approved MLS",
									"        postman.setGlobalVariable(\"cityID\", isJson[0]['cityID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/zipcodes/sold/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"zipcodes",
								"sold",
								"{{approvedMLS}}"
							]
						},
						"description": "All cities represented in the current set of MLS data are available from this method. "
					},
					"response": []
				},
				{
					"name": "postalcodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/postalcodes/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"postalcodes",
								"{{approvedMLS}}"
							]
						},
						"description": "All postal codes represented in the current set of MLS data are available from this method."
					},
					"response": []
				},
				{
					"name": "postalcodes sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "457ccb5b-aabb-4385-9fc8-54070e4861ad",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/postalcodes/sold/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"postalcodes",
								"sold",
								"{{approvedMLS}}"
							]
						},
						"description": "All postal codes represented in the current set of MLS data are available from this method."
					},
					"response": []
				},
				{
					"name": "propertycount",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/propertycount/{{approvedMLS}}?countType=city&countSpecifier={{cityID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"propertycount",
								"{{approvedMLS}}"
							],
							"query": [
								{
									"key": "countType",
									"value": "city"
								},
								{
									"key": "countSpecifier",
									"value": "{{cityID}}"
								}
							]
						},
						"description": "Gives a total number of listings available for a given city, county, or zipcode"
					},
					"response": []
				},
				{
					"name": "propertycount sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f8996f4-6885-4863-b7f2-332d997ec31c",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/propertycount/sold/{{approvedMLS}}?countType=city&countSpecifier={{cityID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"propertycount",
								"sold",
								"{{approvedMLS}}"
							],
							"query": [
								{
									"key": "countType",
									"value": "city"
								},
								{
									"key": "countSpecifier",
									"value": "{{cityID}}"
								}
							]
						},
						"description": "Gives a total number of listings available for a given city, county, or zipcode"
					},
					"response": []
				},
				{
					"name": "searchfields",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set first search field name",
									"        postman.setGlobalVariable(\"searchFieldName\", isJson[0]['name']);",
									"        ",
									"        //set first search field name",
									"        postman.setGlobalVariable(\"searchFieldPtId\", isJson[0]['mlsPtID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/searchfields/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"searchfields",
								"{{approvedMLS}}"
							]
						},
						"description": "All the fields in a given MLS that are currently allowed to be searched according to MLS guidelines."
					},
					"response": []
				},
				{
					"name": "searchfieldvalues",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/searchfieldvalues/{{approvedMLS}}?mlsPtID={{searchFieldPtId}}&name={{searchFieldName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"searchfieldvalues",
								"{{approvedMLS}}"
							],
							"query": [
								{
									"key": "mlsPtID",
									"value": "{{searchFieldPtId}}"
								},
								{
									"key": "name",
									"value": "{{searchFieldName}}"
								}
							]
						},
						"description": "Field values in a given MLS that are currently allowed to be searched according to MLS guidelines."
					},
					"response": []
				},
				{
					"name": "searchfieldvalues sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c104c48-84a8-4e9b-bd8c-5eb115b35d2d",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/searchfieldvalues/sold/{{approvedMLS}}?mlsPtID={{searchFieldPtId}}&name={{searchFieldName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"searchfieldvalues",
								"sold",
								"{{approvedMLS}}"
							],
							"query": [
								{
									"key": "mlsPtID",
									"value": "{{searchFieldPtId}}"
								},
								{
									"key": "name",
									"value": "{{searchFieldName}}"
								}
							]
						},
						"description": "Field values in a given MLS that are currently allowed to be searched according to MLS guidelines."
					},
					"response": []
				},
				{
					"name": "prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/prices/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"prices",
								"{{approvedMLS}}"
							]
						},
						"description": "The sum total of properties listed in a given MLS as well as sums for each property type in the MLS."
					},
					"response": []
				},
				{
					"name": "prices sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d724f1db-da32-42e4-af5f-13dffd66dce0",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/mls/prices/sold/{{approvedMLS}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mls",
								"prices",
								"sold",
								"{{approvedMLS}}"
							]
						},
						"description": "The sum total of properties listed in a given MLS as well as sums for each property type in the MLS."
					},
					"response": []
				}
			],
			"description": "MLS endpoints"
		},
		{
			"name": "2nd Test - Clients",
			"item": [
				{
					"name": "apiversion",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/apiversion",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"apiversion"
							]
						},
						"description": "Get the default api version."
					},
					"response": []
				},
				{
					"name": "accountinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c17776d-9f28-4f68-95ef-9520a8b4368e",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"name": "accesskey",
								"type": "text",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"name": "ancillarykey",
								"type": "text",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"type": "text",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"name": "apiversion",
								"type": "text",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/accountinfo",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"accountinfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "listmethods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78d80173-08e4-4b05-af71-113a4a2a2bbf",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/listmethods",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"listmethods"
							]
						},
						"description": "A simple method for listing all available methods in the current API component."
					},
					"response": []
				},
				{
					"name": "systemlinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/systemlinks",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"systemlinks"
							]
						},
						"description": "Gathers all the pages system pages (search, featured, contact, etc) that can be directly linked to without additional property information being included in the URL."
					},
					"response": []
				},
				{
					"name": "listallowedfields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c08c30d5-4850-4a64-be62-f31a613e899f",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/listallowedfields/{{approvedMLS}}/{{featuredId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"listallowedfields",
								"{{approvedMLS}}",
								"{{featuredId}}"
							]
						},
						"description": "Returns the allowed returnable fields for a given listingID."
					},
					"response": []
				},
				{
					"name": "listcomponents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b762ec67-11c4-4a3c-8644-9488e6475e7b",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/listcomponents",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"listcomponents"
							]
						},
						"description": "This is a simple, access anywhere, method for getting a list of all API components available."
					},
					"response": []
				},
				{
					"name": "featured",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "812729dc-ba89-43e6-a2c1-5e25ba0a60c5",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new featured lsiting ID",
									"        var key = Object.keys(isJson)[0];",
									"        pm.globals.set(\"featuredId\", isJson[key]['listingID']);",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/featured",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"featured"
							]
						},
						"description": "Returns a basic set of information for all of the client's featured (active) properties"
					},
					"response": []
				},
				{
					"name": "widgetsrc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/widgetsrc",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"widgetsrc"
							]
						},
						"description": "Gather all the URLs for javascript widgets on the user's account. These widgets can then be placed on the user's main site via the included URLs."
					},
					"response": []
				},
				{
					"name": "agents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/agents",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"agents"
							]
						},
						"description": "View agent information on a multi-user account."
					},
					"response": []
				},
				{
					"name": "offices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0925-662f-4372-8b0b-a1779c4950f5",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/offices",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"offices"
							]
						},
						"description": "View all offices on a mutli-user account."
					},
					"response": []
				},
				{
					"name": "cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/cities",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"cities"
							]
						},
						"description": "Returns the cities available in each of a client's city lists."
					},
					"response": []
				},
				{
					"name": "citieslistname",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/citieslistname",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"citieslistname"
							]
						},
						"description": "Returns the IDs and names for each of a client's city lists including MLS city lists."
					},
					"response": []
				},
				{
					"name": "counties",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/counties",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"counties"
							]
						},
						"description": "Returns the counties available in each of a client's county lists."
					},
					"response": []
				},
				{
					"name": "countieslistname",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/countieslistname",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"countieslistname"
							]
						},
						"description": "Returns the IDs and names for each of a client's counties lists including MLS counties lists."
					},
					"response": []
				},
				{
					"name": "zipcodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/zipcodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"zipcodes"
							]
						},
						"description": "Returns the zipcodes available in each of a client's zipcode lists."
					},
					"response": []
				},
				{
					"name": "postalcodeslistname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfaca93f-66f3-4eb6-9de8-9d315527dbef",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/postalcodeslistname",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"postalcodeslistname"
							]
						},
						"description": "Returns the IDs and names for each of a client's postalcode lists including MLS postalcode lists."
					},
					"response": []
				},
				{
					"name": "postalcodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da09f4c5-b44c-47d7-be77-c8fc21045554",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/postalcodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"postalcodes"
							]
						},
						"description": "Returns the postalcodes available in each of a client's postalcode lists."
					},
					"response": []
				},
				{
					"name": "listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a75d3c-2789-46e0-a258-023afc475831",
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/listing/{{approvedMLS}}/{{featuredId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"listing",
								"{{approvedMLS}}",
								"{{featuredId}}"
							]
						},
						"description": "Returns the detailed information for a given listingID."
					},
					"response": []
				},
				{
					"name": "soldpending",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/soldpending",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"soldpending"
							]
						},
						"description": "Returns a basic set of information for all of the client's sold and pending properties."
					},
					"response": []
				},
				{
					"name": "dynamicwrapperurl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "462d9fc9-db4b-4d37-a71b-90b8bd4075da",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "dynamicURL",
									"value": "http://testingURL.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/clients/dynamicwrapperurl",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"dynamicwrapperurl"
							]
						},
						"description": "Set wrapper URL. This is the global url."
					},
					"response": []
				},
				{
					"name": "wrappercache",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Check status code is under 300 and check string length",
									"if(responseCode.code < 300){",
									"    var legnth = responseBody.length;",
									"    if (responseCode.code === 200 && legnth > 0){",
									"        var bodyLength = true;",
									"",
									"        var isJson = JSON.parse(responseBody);",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"    }",
									"    if (responseCode.code === 204 && legnth === 0){",
									"    var bodyLength = true;",
									"    }",
									"}",
									"",
									"",
									"tests[\"Retun Length\"] = bodyLength;",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/wrappercache",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"wrappercache"
							]
						},
						"description": "Delete wrapper cache."
					},
					"response": []
				},
				{
					"name": "supplemental",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new supplemetal property ID",
									"        postman.setGlobalVariable(\"suppId\", isJson['newID']);",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "likeIdxID",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "likeMlsPtID",
									"value": "1",
									"type": "text"
								},
								{
									"key": "images[hp]",
									"value": "http://example.com/image1.jpg",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/clients/supplemental",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"supplemental"
							]
						},
						"description": "Create a new supplemental listing."
					},
					"response": []
				},
				{
					"name": "supplemental",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/supplemental",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"supplemental"
							]
						},
						"description": "Get supplemental listings."
					},
					"response": []
				},
				{
					"name": "supplemental",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "likeIdxID",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "likeMlsPtID",
									"value": "1",
									"type": "text"
								},
								{
									"key": "images[hp]",
									"value": "http://examplePost.com/postimage.jpg",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/clients/supplemental/{{suppId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"supplemental",
								"{{suppId}}"
							]
						},
						"description": "Update a supplemental listing."
					},
					"response": []
				},
				{
					"name": "supplemental",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/supplemental/{{suppId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"supplemental",
								"{{suppId}}"
							]
						},
						"description": "Delete a supplemental listing."
					},
					"response": []
				},
				{
					"name": "savedlinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new saved link ID",
									"        postman.setGlobalVariable(\"savedLinkId\", isJson['newID']);",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "linkName",
									"value": "Test_side_of_test",
									"type": "text"
								},
								{
									"key": "pageTitle",
									"value": "Test_side_of_test",
									"type": "text"
								},
								{
									"key": "linkTitle",
									"value": "Test_side_of_test",
									"type": "text"
								},
								{
									"key": "queryString[idxID]",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "queryString[hp]",
									"value": "123456",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/clients/savedlinks",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"savedlinks"
							]
						},
						"description": "Create a new client saved link"
					},
					"response": []
				},
				{
					"name": "savedlinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new saved link ID",
									"        postman.setGlobalVariable(\"savedLinkId\", isJson['newID']);",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "linkName",
									"value": "Post_side_of_test",
									"type": "text"
								},
								{
									"key": "pageTitle",
									"value": "Post_side_of_test",
									"type": "text"
								},
								{
									"key": "linkTitle",
									"value": "Post_side_of_test",
									"type": "text"
								},
								{
									"key": "queryString[idxID]",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "queryString[hp]",
									"value": "654321",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/clients/savedlinks/{{savedLinkId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"savedlinks",
								"{{savedLinkId}}"
							]
						},
						"description": "Update a client saved link"
					},
					"response": []
				},
				{
					"name": "savedlinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/savedlinks",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"savedlinks"
							]
						},
						"description": "Getclient saved links"
					},
					"response": []
				},
				{
					"name": "savedlinks Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d64194d6-275f-4508-a253-2257249ddd89",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/clients/savedlinks/{{savedLinkId}}/count",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"savedlinks",
								"{{savedLinkId}}",
								"count"
							]
						},
						"description": "Getclient saved links"
					},
					"response": []
				},
				{
					"name": "savedlinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new saved link ID",
									"        postman.setGlobalVariable(\"savedLinkId\", isJson['newID']);",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "linkName",
									"value": "Post_side_of_test",
									"type": "text"
								},
								{
									"key": "pageTitle",
									"value": "Post_side_of_test",
									"type": "text"
								},
								{
									"key": "linkTitle",
									"value": "Post_side_of_test",
									"type": "text"
								},
								{
									"key": "queryString[idxID]",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "queryString[hp]",
									"value": "654321",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/clients/savedlinks/{{savedLinkId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"clients",
								"savedlinks",
								"{{savedLinkId}}"
							]
						},
						"description": "Delete a client saved link"
					},
					"response": []
				}
			],
			"description": "Client endpoints"
		},
		{
			"name": "3rd Test - Leads",
			"item": [
				{
					"name": "listcomponents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/listcomponents",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"listcomponents"
							]
						},
						"description": "This is a simple, access anywhere, method for getting a list of all API components available."
					},
					"response": []
				},
				{
					"name": "listmethods",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/listmethods",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"listmethods"
							]
						},
						"description": "A simple method for listing all available methods in the current API component."
					},
					"response": []
				},
				{
					"name": "lead",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new lead ID",
									"        postman.setGlobalVariable(\"leadId\", isJson['newID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstName",
									"value": "putTest",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "putPrueba",
									"type": "text"
								},
								{
									"key": "email",
									"value": "putTesting@gmail.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/lead",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"lead"
							]
						},
						"description": "Get information for one or multiple leads.\n\nExample Request: https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2016-01-01+23:59:59&dateType=subscribeDate\n\nFor Data on a specific lead add/LEAD_ID_HERE\n\nExample: https://api.idxbroker.com/leads/lead/123"
					},
					"response": []
				},
				{
					"name": "lead",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/lead",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"lead"
							]
						},
						"description": "Get information for one or multiple leads.\n\nExample Request: https://api.idxbroker.com/leads/lead?interval=24&startDatetime=2016-01-01+23:59:59&dateType=subscribeDate\n\nFor Data on a specific lead add/LEAD_ID_HERE\n\nExample: https://api.idxbroker.com/leads/lead/123"
					},
					"response": []
				},
				{
					"name": "leadtraffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/leadtraffic/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"leadtraffic",
								"{{leadId}}"
							]
						},
						"description": "Get information on a lead's traffic history."
					},
					"response": []
				},
				{
					"name": "lead",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstName",
									"value": "postTest",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "postPrueba",
									"type": "text"
								},
								{
									"key": "email",
									"value": "postTesting@gmail.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/lead/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"lead",
								"{{leadId}}"
							]
						},
						"description": "Post information for a lead.\n\n\nExample: https://api.idxbroker.com/leads/lead/123"
					},
					"response": []
				},
				{
					"name": "note",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new lead ID",
									"        postman.setGlobalVariable(\"noteId\", isJson['newID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "note",
									"value": "Test Note",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/note/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"note",
								"{{leadId}}"
							]
						},
						"description": "Add new note information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "note",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/note/{{noteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"note",
								"{{noteId}}"
							]
						},
						"description": "Get note information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "note",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "note",
									"value": "Test Note",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/note/{{leadId}}/{{noteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"note",
								"{{leadId}}",
								"{{noteId}}"
							]
						},
						"description": "Post new note information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "note",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "note",
									"value": "Test Note",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/note/{{leadId}}/{{noteId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"note",
								"{{leadId}}",
								"{{noteId}}"
							]
						},
						"description": "Delete note information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "property",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new lead ID",
									"        postman.setGlobalVariable(\"propId\", isJson['newID']);",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "propertyName",
									"value": "Test Property",
									"type": "text"
								},
								{
									"key": "property[idxID]",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "property[listingID]",
									"value": "{{featuredId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/property/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"property",
								"{{leadId}}"
							]
						},
						"description": "Add new property information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "property",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/property/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"property",
								"{{leadId}}"
							]
						},
						"description": "Get a property information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "property",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "propertyName",
									"value": "Test POST Property",
									"type": "text"
								},
								{
									"key": "property[idxID]",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "property[listingID]",
									"value": "{{featuredId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/property/{{leadId}}/{{propId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"property",
								"{{leadId}}",
								"{{propId}}"
							]
						},
						"description": "Update a property information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "property",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/property/{{leadId}}/{{propId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"property",
								"{{leadId}}",
								"{{propId}}"
							]
						},
						"description": "Delete a property information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "search",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"        ",
									"        //set new saved search ID for a lead",
									"        postman.setGlobalVariable(\"searchId\", isJson['newID']);",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "searchName",
									"value": "Test search",
									"type": "text"
								},
								{
									"key": "search[idxID]",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "search[hp]",
									"value": "search[hp]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/search/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"search",
								"{{leadId}}"
							]
						},
						"description": "New search information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "search",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/search/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"search",
								"{{leadId}}"
							]
						},
						"description": "Get saved search information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "search",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "searchName",
									"value": "Post test search",
									"type": "text"
								},
								{
									"key": "search[idxID]",
									"value": "{{approvedMLS}}",
									"type": "text"
								},
								{
									"key": "search[hp]",
									"value": "654321",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/leads/search/{{leadId}}/{{searchId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"search",
								"{{leadId}}",
								"{{searchId}}"
							]
						},
						"description": "Update search information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "search",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/search/{{leadId}}/{{searchId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"search",
								"{{leadId}}",
								"{{searchId}}"
							]
						},
						"description": "Delete search information for a lead.\n"
					},
					"response": []
				},
				{
					"name": "lead",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{accesskey}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/leads/lead/{{leadId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"leads",
								"lead",
								"{{leadId}}"
							]
						},
						"description": "Delete Lead\n\nExample: https://api.idxbroker.com/leads/lead/123"
					},
					"response": []
				}
			],
			"description": "Lead endpoints"
		},
		{
			"name": "4th Test - Partners",
			"item": [
				{
					"name": "listmethods",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/listmethods",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"listmethods"
							]
						},
						"description": "A simple method for listing all available methods in the current API component."
					},
					"response": []
				},
				{
					"name": "listcomponents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/listcomponents",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"listcomponents"
							]
						},
						"description": "This is a simple, access anywhere, method for getting a list of all API components available."
					},
					"response": []
				},
				{
					"name": "clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/clients",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"clients"
							]
						},
						"description": "A list of clients available to a given partner. The list of clients can be filtered by GET values."
					},
					"response": []
				},
				{
					"name": "propertytypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/propertytypes",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"propertytypes"
							]
						},
						"description": "Gives the names and IDs of all available property types. This method differs from the property type lookup method in the client API component in that it can look up property types for any active Platinum MLS, not just those for which the client is a member."
					},
					"response": []
				},
				{
					"name": "pricing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c17776d-9f28-4f68-95ef-9520a8b4368e",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"name": "ancillarykey",
								"type": "text",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"type": "text",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"name": "apiversion",
								"type": "text",
								"value": "{{apiversion}}"
							},
							{
								"key": "ancillarykey",
								"value": "{{ancillarykey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/pricing",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"pricing"
							]
						}
					},
					"response": []
				},
				{
					"name": "aggregatedsupplemental",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedsupplemental",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedsupplemental"
							]
						},
						"description": "Get a list of supplemental (non-MLS) properties."
					},
					"response": []
				},
				{
					"name": "aggregatedproperties",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedproperties",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedproperties"
							]
						},
						"description": "Get a list of all lead saved properties."
					},
					"response": []
				},
				{
					"name": "aggregatedagents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedagents",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedagents"
							]
						},
						"description": "Get a list of all agents for your clients."
					},
					"response": []
				},
				{
					"name": "aggregatedleadtraffic",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedleadtraffic",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedleadtraffic"
							]
						},
						"description": "Get a list of all leads traffic history."
					},
					"response": []
				},
				{
					"name": "aggregatedleads",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedleads",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedleads"
							]
						},
						"description": "Get a list of all leads."
					},
					"response": []
				},
				{
					"name": "aggregatedsearches",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedsearches",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedsearches"
							]
						},
						"description": "Get a list of all lead saved searches."
					},
					"response": []
				},
				{
					"name": "aggregatedsoldpending",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedsoldpending",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedsoldpending"
							]
						},
						"description": "Get a list of sold/pending MLS properties."
					},
					"response": []
				},
				{
					"name": "aggregatedfeatured",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedfeatured",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedfeatured"
							]
						},
						"description": "Get a list of featured MLS properties. "
					},
					"response": []
				},
				{
					"name": "aggregatedlistingstatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/** Check status code is under 300 if so run tests",
									"* The following are standard tests to be preformed on all endpoints.",
									"* Some tests will only run if status is below 300",
									"*/",
									"if (responseCode.code < 300) {",
									"    // rerport the status code is in the 200s",
									"    tests[\"Status code is 200 or 204\"] = responseCode.code < 300;",
									"",
									"    // get response body length for test",
									"    var legnth = responseBody.length;",
									"",
									"    // tests when code is 200 and body lenth greater than 0",
									"    if (responseCode.code === 200 && legnth > 0) {",
									"        // set variable of body legnth and assume true",
									"        var bodyLength = true;",
									"",
									"        // parse json response",
									"        var isJson = JSON.parse(responseBody);",
									"",
									"        // test for valid json",
									"        tests[\"Valid JSON\"] = isJson;",
									"",
									"    }",
									"    // test body length when code is 204. Must be 0",
									"    if (responseCode.code === 204 && legnth === 0) {",
									"        //if body legnth is 0 then set variable to true",
									"        var bodyLength = true;",
									"    }",
									"}",
									"",
									"// run test for body legnth",
									"tests[\"Retun Length is correct for http code\"] = bodyLength;",
									"",
									"// test for a php warning",
									"if (!responseBody.has(\"PHP WARNING\")) {",
									"    var phpWarn = true;",
									"}",
									"tests[\"Does NOT contain text \\\"PHP Warning\\\"\"] = phpWarn;",
									"",
									"//run test that response was under 30 seconds",
									"tests[\"Response time is under than 30 sec\"] = responseTime < 30000;",
									"",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accesskey",
								"value": "{{ancillarykey}}"
							},
							{
								"key": "outputtype",
								"value": "{{outputtype}}"
							},
							{
								"key": "apiversion",
								"value": "{{apiversion}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners/aggregatedlistingstatus",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners",
								"aggregatedlistingstatus"
							]
						},
						"description": "This method gives the status for all MLS listings (not supplemental) broken down by client account ID. This includes sold/pending listings with an unknown status which are not usually returned by sold/pending api methods. This is helpful if you need to know when previously gathered featured properties have left the market."
					},
					"response": []
				}
			],
			"description": "Partner Endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "23501c96-b4dd-4c33-a910-404a3a18fb4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "51f04c17-7317-4143-9580-cbe3dbd6c6da",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
